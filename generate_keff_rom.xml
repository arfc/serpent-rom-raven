<?xml version="1.0"?>
<Simulation verbosity="all">
  <RunInfo>
    <WorkingDir>data</WorkingDir>
    <!-- ordered list of step names that RAVEN will run -->
    <Sequence>get_input, make_rom, rom_dump</Sequence>
    <!-- number of parallel runs executed simultaneously -->
    <batchSize>6</batchSize>
  </RunInfo>

  <VariableGroups>
    <ExternalXML node='Group'
                 xmlToLoad='./aux-input-files/feature_isotopes'/>
    <Group name="target_space">boc_keff, eoc_keff</Group>
  </VariableGroups>

  <Files>
    <Input name="rom_output" type="">keff_rom_svm</Input>
    <Input name="inputcsv" type="">combined.csv</Input>
  </Files>

  <Models>
    <!-- Defines ROM specifics, from library(subType),
         independent variable(Features), dependent variable(Target),
         algorithm (SKLtype) and etc. -->
    <ROM name="rom" subType="SciKitLearn">
      <Features>feature_space</Features>
      <Target>target_space</Target>
      <SKLtype>svm|SVR</SKLtype>
      <kernel>rbf</kernel>
    </ROM>
  </Models>

  <Steps>
    <IOStep name="get_input">
      <!-- In the IOStep the serpent-output-converted-csv files are logged into output-->
      <Input class="Files" type="">inputcsv</Input>
      <Output class="DataObjects" type="PointSet">inputdata</Output>
    </IOStep>
    <RomTrainer name="make_rom">
      <!-- Given the dataset, generate ROM using Scikit-learn -->
      <Input class="DataObjects" type="PointSet">inputdata</Input>
      <Output class="Models" type="ROM">rom</Output>
    </RomTrainer>
    <IOStep name="rom_dump">
      <!-- Save the rom as rom_output-->
      <Input class="Models" type="ROM">rom</Input>
      <Output class="Files" type="">rom_output</Output>
    </IOStep>
  </Steps>

  <DataObjects>
    <!-- Specifies the output objects, just the rows from the
         serpent-output-converted-csv file with column name -->
    <PointSet name="inputdata">
      <Input>feature_space</Input>
      <Output>target_space</Output>
    </PointSet>
  </DataObjects>

</Simulation>
