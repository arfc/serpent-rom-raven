<?xml version="1.0" ?>
<Simulation verbosity="all">
  <RunInfo>
    <WorkingDir>serpent-raven</WorkingDir>
    <!-- ordered list of step names that RAVEN will run -->
    <Sequence>runGrid,outputResults,trainer,trained_rom_dump</Sequence>
    <!-- number of parallel runs executed simultaneously -->
    <batchSize>2</batchSize>
  </RunInfo>

  <Files>
    <Input name="originalInput" type="">publ_core.serpent</Input>
    <Input name="rom_output"    type="">rom_output</Input>
  </Files>

  <Models>
    <!-- Points to SERPENT executable(executable) and interface(subType)
        clargs add to the command run (e.g. prepend -add in front of command)-->
    <Code name="SERPENT" subType="Serpent">
      <executable>/projects/sciteam/bahg/serpent/src/sss2 -omp 32 </executable>
      <clargs arg="aprun -n 9 -d 32 " type="prepend"/>
      <clargs arg="" extension=".serpent" type="input"/>
    </Code>
  </Models>

  <Distributions>
    <!-- Distribution to sample from
         uniform distribution from 0.1 to 1 -->
    <Uniform name="timedist">
      <lowerBound>0.0</lowerBound>
      <upperBound>100</upperBound>
    </Uniform>
  </Distributions>

  <Samplers>
    <Grid name="myGrid">
      <variable name="deptime">
        <!-- fillin $RAVEN: timedist with things sampled from distribution -->
        <distribution>timedist</distribution>
        <!-- equally spaced steps with lower and upper bound 
             starting from CDF 0.1 to 1 -->
        <grid construction="equal" steps="2" type="CDF">0.1 1</grid>
      </variable>
    </Grid>
  </Samplers>

  <Models>
    <!-- Defines ROM specifics, from library(subType),
         independent variable(Features), dependent variable(Target),
         algorithm (SKLtype) and etc. -->
    <ROM name='keff_comp_rom' subType='SciKitLearn'>
      <Features>deptime</Features>
      <Target>keff</Target>
      <SKLtype>linear_model|LinearRegression</SKLtype>
      <fit_intercept>True</fit_intercept>
      <normalize>False</normalize>
    </ROM>
  </Models>

  <Steps>
    <MultiRun name="runGrid">
      <!-- runGrid runs serpent by the number of steps with sampled variable -->
      <Input   class="Files"       type=""          >originalInput</Input>
      <Model   class="Models"      type="Code"      >SERPENT</Model>
      <Sampler class="Samplers"    type="Grid"      >myGrid</Sampler>
      <Output  class="DataObjects" type="PointSet"  >outPointSet</Output>
    </MultiRun>
    <IOStep name="outputResults">
      <!-- In the IOStep the serpent-output-converted-csv files are logged into output-->
      <Input  class="DataObjects" type="PointSet"   >outPointSet</Input>
      <Output  class="OutStreams"  type="Print"     >outPointSet_dump</Output>
    </IOStep>
    <RomTrainer name='trainer'>
      <!-- Given the dataset, generate ROM using Scikit-learn -->
      <Input class='DataObjects'   type='PointSet'  >outPointSet</Input>
      <Output class='Models'     type='ROM'         >keff_comp_rom</Output>
    </RomTrainer>
    <IOStep name='trained_rom_dump'>
      <!-- Save the rom as rom_output-->
      <Input class='Models'      type='ROM'         >keff_comp_rom</Input>
      <Output class='Files'      type=''            >rom_output</Output>
    </IOStep>
  </Steps>

  <OutStreams>
    <!-- Dumps the rows from serpent-output-converted-csv file -->
    <Print name="outPointSet_dump">
      <type>csv</type>
      <source>outPointSet</source>
    </Print>
  </OutStreams>

  <DataObjects>
    <!-- Specifies the output objects, just the rows from the
         serpent-output-converted-csv file with column name -->
    <PointSet name="outPointSet">
      <Input>deptime</Input>
      <Output>keff</Output>
    </PointSet>
  </DataObjects>

</Simulation>
